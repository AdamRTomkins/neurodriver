#!/usr/bin/env python

"""
Routines for reading/writing numpy arrays from/to HDF5 files.
"""

import tables
import numpy as np

def write_memory_to_file(A, filename, mode='w', title='test'):
    """
    Write numpy array to HDF5 file.

    Writes numpy array containing numerical data to HDF5 file.
    Real arrays are stored in '/real'; if `A` is complex,
    its imaginary portion is stored in '/imag'.

    Parameters
    ----------
    A : numpy.ndarray, pycuda.gpuarray.GPUArray, parray.PitchArray
        Array to store. Must contain numerical data.
    filename: store
        Output file name.
    mode : str
        Mode to use when opening file. 'w' creates a new file,
        'a' appends to an existing file. If appending, the leading
        dimension of A must be the same as the array in the
        existing file.
    title : str
        File title.

    Notes
    -----
    Files written with this routine can be opened in MATLAB using
    the `h5read` function.

    See Also
    --------
    read_file
    """

    h5file = tables.openFile(filename, mode, title)

    if (A.dtype == np.float32) or (A.dtype == np.complex64):
        tb = tables.Float32Atom
    elif (A.dtype == np.float64) or (A.dtype == np.complex128):
        tb = tables.Float64Atom
    elif A.dtype == np.int32:
        tb = tables.Int32Atom
    elif A.dtype == np.int64:
        tb = tables.Int64Atom
    else:
        TypeError('unsupported array dtype')

    # This avoids having to explicitly import pycuda or parray:
    if A.__class__.__name__ in ['GPUArray', 'PitchArray']:
        B = A.get()
    elif A.__class__.__name__ == 'ndarray':
        B = A
    else:
        raise TypeError('unsupported array type')

    shape = list(B.shape)
    shape[0] = 0

    if mode == 'w':
        if np.iscomplexobj(B):
            h5file.createEArray("/", "real", tb(), tuple(shape))
            h5file.createEArray("/", "imag", tb(), tuple(shape))
        else:
            h5file.createEArray("/", "real", tb(), tuple(shape))

    if np.iscomplexobj(B):
        h5file.root.real.append(B.real)
        h5file.root.imag.append(B.imag)
    else:
        h5file.root.real.append(B)

    h5file.close()

    if mode == 'w':
        print "file %s created" % (filename)

def write_array(A, filename, mode = 'w', title='test'):
    """
    write array to a h5 file
    h5 file contains root.array(A real or complex)

    A: a ndarray, GPUArray or PitchArray
    filename: name of file to store
    mode: 'w' to start a new file
          'a' to append, leading dimension of A must be
            the same as the existing file

    file can be read by read_array in python
    """

    h5file = tables.openFile(filename, mode, title)

    if (A.dtype == np.float32):
        tb = tables.Float32Atom
    elif (A.dtype == np.float64):
        tb = tables.Float64Atom

    # FIXME: Does not work because ComplexAtom requires
    #  at least 1 argument and fails later. Non named argument
    #  is the itemsize: 8 single precision 16 double
    #elif (A.dtype == np.complex64) or (A.dtype == np.complex128):
    #    tb = tables.ComplexAtom
    elif A.dtype == np.int32:
        tb = tables.Int32Atom
    elif A.dtype == np.int64:
        tb = tables.Int64Atom
    else:
        TypeError('unsupported array dtype')

    if A.__class__.__name__ in ['GPUArray', 'PitchArray']:
        B = A.get()
    elif A.__class__.__name__ == 'ndarray':
        B = A
    else:
        raise TypeError('unsupported array type')

    shape = list(B.shape)
    shape[0] = 0

    if mode == 'w':
        h5file.createEArray("/","array", tb(), tuple(shape))

    h5file.root.array.append(B)

    h5file.close()
    if mode == 'w':
        print "file %s created" % (filename)

def read_file(filename):
    """
    Read numpy array from HDF5 file.

    Reads numerical data from HDF5 file into a numpy array.
    Real arrays are assumed to be stored in '/real'; if `A` is complex,
    its imaginary portion are assumed to be stored in '/imag'.

    Returns
    -------
    a : numpy.array
        Array read from file.

    Notes
    -----
    Files written with `write_memory_to_file` or MATLAB's `h5write` function can
    be read with this routine.

    See Also
    --------
    write_memory_to_file
    """

    h5file = tables.openFile(filename, "r")
    n = h5file.root._v_nchildren

    if n == 1:
        a = h5file.root.real.read()
    elif n == 2:
        a = h5file.root.real.read() + \
            (np.array(1j).astype(np.complex64))*h5file.root.imag.read()

    h5file.close()

    return a

def read_array(filename):
    """
    read a h5 file generated by write_array
    returns a ndarray
    """

    h5file = tables.openFile(filename, "r")

    a = h5file.root.array.read()
    h5file.close()

    return a
